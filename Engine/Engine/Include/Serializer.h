//File generated by Flavo Header Tool. DO NOT edit unless you are sure you know what to do
#pragma once

#include "Global.h"
#include "EECS.h"
typedef eecs::SystemBase*(*CreateObjectOfTypeFunc)();
typedef eecs::ComponentBase*(*CreateComponentOfTypeFunc)();

template<typename T> //primary system template
eecs::SystemBase* createObjectOfType() { return new T(); }

template<typename T> //primary component template
eecs::ComponentBase* createComponentOfType() { return new T(); }

namespace ft_game { class BackgroundAudioSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::BackgroundAudioSystem>();

namespace ft_game { class EndGameSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::EndGameSystem>();

namespace ft_game { class Hologram; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::Hologram>();

namespace ft_game { class LineRenderer; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::LineRenderer>();

namespace ft_game { class MainMenuSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::MainMenuSystem>();

namespace ft_game { class Pill; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::Pill>();

namespace ft_game { class PillSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::PillSystem>();

namespace ft_engine { class Player; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::Player>();

namespace ft_engine { class PlayerInputSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_engine::PlayerInputSystem>();

namespace ft_game { class PlayerMovementSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::PlayerMovementSystem>();

namespace ft_game { class PlayerShootingSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::PlayerShootingSystem>();

namespace ft_game { class RespawnSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::RespawnSystem>();

namespace ft_game { class SceneSpecificData; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::SceneSpecificData>();

namespace ft_game { class Water; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::Water>();

namespace ft_game { class WaterSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_game::WaterSystem>();

namespace ft_game { class WeaponGun; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::WeaponGun>();

namespace ft_game { class WeaponKnife; }
template<> eecs::ComponentBase* createComponentOfType<ft_game::WeaponKnife>();

namespace ft_engine { class Metadata; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::Metadata>();

namespace ft_engine { class CharacterController; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::CharacterController>();

namespace ft_engine { class Collider; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::Collider>();

namespace ft_engine { class FixedJoint; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::FixedJoint>();

namespace ft_engine { class ResolveConstraintsSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_engine::ResolveConstraintsSystem>();

namespace ft_engine { class Rigidbody; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::Rigidbody>();

namespace ft_engine { class RigidbodySystem; }
template<> eecs::SystemBase* createObjectOfType<ft_engine::RigidbodySystem>();

namespace ft_engine { class Transform; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::Transform>();

namespace ft_engine { class TransformSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_engine::TransformSystem>();

namespace ft_engine { class TriggerCollider; }
template<> eecs::ComponentBase* createComponentOfType<ft_engine::TriggerCollider>();

namespace ft_render { class Camera; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::Camera>();

namespace ft_render { class CylinderLight; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::CylinderLight>();

namespace ft_render { class DirectionalLight; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::DirectionalLight>();

namespace ft_render { class PointLight; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::PointLight>();

namespace ft_render { class RenderSystem; }
template<> eecs::SystemBase* createObjectOfType<ft_render::RenderSystem>();

namespace ft_render { class SkinnedMeshRenderer; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::SkinnedMeshRenderer>();

namespace ft_render { class StaticMeshRenderer; }
template<> eecs::ComponentBase* createComponentOfType<ft_render::StaticMeshRenderer>();

namespace reflection
{
	class Serializer
	{
	public:
		Serializer();
		~Serializer();

		void initRootComponent(eecs::Entity entity) const;

		const std::unordered_map<std::string, CreateObjectOfTypeFunc>& getSystemCreationMap() const;
		const std::unordered_map<std::string, CreateComponentOfTypeFunc>& getComponentCreationMap() const;
		const std::unordered_map<std::string, uint32>& getComponentTypeMap() const;

		const std::unordered_map<uint32, std::string>& getTypeComponentMap() const;

	private:
		std::unordered_map<std::string, CreateObjectOfTypeFunc> systemCreationMap_;
		std::unordered_map<std::string, CreateComponentOfTypeFunc> componentCreationMap_;
		std::unordered_map<std::string, uint32> componentTypeMap_;
		std::unordered_map<uint32, std::string> typeComponentMap_;
	}; //class Serializer
} //namespace reflection

namespace reflection
{
	enum class ComponentEnum
	{
		Hologram = 0,
		LineRenderer = 1,
		Pill = 2,
		Player = 3,
		SceneSpecificData = 4,
		Water = 5,
		WeaponGun = 6,
		WeaponKnife = 7,
		Metadata = 8,
		CharacterController = 9,
		Collider = 10,
		FixedJoint = 11,
		Rigidbody = 12,
		Transform = 13,
		TriggerCollider = 14,
		Camera = 15,
		CylinderLight = 16,
		DirectionalLight = 17,
		PointLight = 18,
		SkinnedMeshRenderer = 19,
		StaticMeshRenderer = 20,
	}; //enum class ComponentEnum
} //namespace reflection
